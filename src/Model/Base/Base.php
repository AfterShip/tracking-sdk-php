<?php
/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
namespace Tracking\Model\Base;

use Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor;
use Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor;
use Symfony\Component\PropertyInfo\PropertyInfoExtractor;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

class Base
{
    public function toArray(): array
    {
        return json_decode(json_encode($this), true);
    }

    public function toRequestArray(): array
    {
        // for compatibility with PHP 8.*
        $oldErrorReporting = error_reporting();
        error_reporting($oldErrorReporting & ~E_DEPRECATED);

        $serializer = new \Symfony\Component\Serializer\Serializer([new CustomNormalizer()], [new \Symfony\Component\Serializer\Encoder\JsonEncoder()]);
        $ret = $serializer->normalize($this);
        error_reporting($oldErrorReporting);
        return $ret;
    }

    public static function fromArray(array $data, $class)
    {
        // for compatibility with PHP 8.*
        $oldErrorReporting = error_reporting();
        error_reporting($oldErrorReporting & ~E_DEPRECATED);

        $encoder = [new JsonEncoder()];
        $extractor = new PropertyInfoExtractor([], [new PhpDocExtractor(), new ReflectionExtractor()]);
        $normalizer = [new ArrayDenormalizer(), new ObjectNormalizer(null, null, null, $extractor)];
        $serializer = new Serializer($normalizer, $encoder);
        $obj = $serializer->denormalize($data, $class);

        error_reporting($oldErrorReporting);

        return $obj;
    }
}
