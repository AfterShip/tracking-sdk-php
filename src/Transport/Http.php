<?php
/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
namespace Tracking\Transport;

use Tracking\Config;
use Tracking\Exception\AfterShipError;
use GuzzleHttp\Client;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Middleware;
use Tracking\Exception\ErrorCode;

class Http
{
    /**
     * @var Client
     */
    private $client;
    private $config;
    const CONTENT_TYPE = 'application/json';

    const SDK_VERSION = '7.0.0';

    public function __construct(Config $config)
    {
        $stack = HandlerStack::create();
        $stack->push($this->createRetryMiddleware());

        $client = new Client([
            'base_uri' => $config->getDomain(),
            'handler' => $stack,
        ]);

        $this->client = $client;

        $this->config = $config;
    }

    /**
     * @throws AfterShipError
     */
    public function request($method, $url, $options = []): \Psr\Http\Message\ResponseInterface
    {
        $options['http_errors'] = false;

        $urlWithQuery = $this->config->getDomain() . $url;
        if (!empty($options['query'])) {
            $urlWithQuery .= '?' . http_build_query($options['query']);
        }

        $options['headers'] =  $this->genHeaders($method, $urlWithQuery, $options['json'] ?? [], $options['headers'] ?? []);

        if ($this->config->getProxy()) {
            $options['proxy'] = $this->config->getProxy();
        }

        $options['timeout'] = $this->config->getTimeout() / 1000;

        try {
            // for compatibility with PHP 8.*
            $oldErrorReporting = error_reporting();
            error_reporting($oldErrorReporting & ~E_DEPRECATED);
            $resp = $this->client->request($method, $url, $options);
            error_reporting($oldErrorReporting);
            return $resp;
        } catch (\GuzzleHttp\Exception\ConnectException $e) {
            throw ErrorCode::genLocalError(ErrorCode::SDK_TIMED_OUT, 'Connection error: ' . $e->getMessage());
        } catch (\Exception $e) {
            throw ErrorCode::genLocalError(ErrorCode::SDK_REQUEST_ERROR, 'Request error: ' . $e->getMessage());
        } catch (\GuzzleHttp\Exception\GuzzleException $e) {
            throw ErrorCode::genLocalError(ErrorCode::SDK_REQUEST_ERROR, 'Request error: ' . $e->getMessage());
        }
    }

    private function createRetryMiddleware(): callable
    {
        return Middleware::retry(
            function ($retries, $request, $response = null, $exception = null) {
                if ($retries >= $this->config->getMaxRetry()) {
                    return false;
                }

                if ($exception instanceof \GuzzleHttp\Exception\ConnectException) {
                    return true;
                }

                if (!empty($exception)) {
                    return false;
                }

                $statusCode = $response->getStatusCode();
                if ($statusCode >= 500) {
                    return true;
                }

                return false;
            },
            function ($retries) {
                // delay: 3 * 2^(retryAttempt - 1)
                $delay = 3 * pow(2, $retries - 1);

                // jitter between -halfOfTheDelay seconds and halfOfTheDelay seconds
                $halfDelay = $delay / 2;
                $jitter = $halfDelay * (mt_rand(-1000000, 1000000) / 1000000);

                // to ensure the delay would not be less than 1 second even if the delayBase is smaller than 2
                $delayWithJitter = max(1, $delay + $jitter);

                // convert to milliseconds
                return $delayWithJitter * 1000;
            }
        );
    }

    private function genHeaders(string $method, string $urlWithQuery, array $payload, array $customerHeader): array
    {
        $asClient = 'aftership-sdk-php/' . self::SDK_VERSION . ' (https://www.aftership.com) guzzle/6.5.8';
        $headers = $customerHeader + [
            'as-api-key' => $this->config->getApiKey(),
            'date' => gmdate('D, d M Y H:i:s \G\M\T', time()),
            'content-type' => '',
            'user-agent' => $asClient,
            'aftership-client' => $asClient,
        ];

        // user-agent priority: customer function > customer global config > default
        $headers['user-agent'] = $customerHeader['user-agent'] ?? $this->config->getUserAgent() ?? $asClient;

        if (!empty($payload) && $method != "GET") {
            $headers['content-type'] = self::CONTENT_TYPE;
        }

        $authType = $this->config->getAuthenticationType();
        // if not RSA or AES encryption. No need to sign the request
        if ($authType == Config::AUTHENTICATION_TYPE_API_KEY) {
            return $headers;
        }

        $signString = $this->getSignString($method, $urlWithQuery, $payload, $headers);

        if ($authType == Config::AUTHENTICATION_TYPE_RSA) {
            $sign = Encryption::rsaPSSSha256Encrypt($signString, $this->config->getApiSecret(), '');
            $headers['as-signature-rsa-sha256'] = $sign;
        }
        if ($authType == Config::AUTHENTICATION_TYPE_AES) {
            $sign = Encryption::hmacSha256Encrypt($signString, $this->config->getApiSecret());
            $headers['as-signature-hmac-sha256'] = $sign;
        }
        return $headers;
    }

    private function getSignString($method, $url, $data, $headers)
    {
        $contentMD5 = "";
        if (!empty($data) && $method != "GET") {
            $contentMD5 = strtoupper(md5(json_encode($data)));
        }

        $canonicalizedHeaders = $this->getCanonicalizedHeaders($headers);
        $canonicalizedResource = $this->getCanonicalizedResource($url);

        return mb_convert_encoding(implode("\n", [
            $method,
            $contentMD5,
            $headers['content-type'],
            $headers['date'],
            $canonicalizedHeaders,
            $canonicalizedResource,
        ]), 'UTF-8');
    }

    private function getCanonicalizedHeaders($headers)
    {
        $filtered_headers = [];

        foreach ($headers as $key => $value) {
            // Check if the header key starts with "as-"
            if (strpos($key, 'as-') === 0) {
                // Convert header key to lowercase and trim leading/trailing spaces
                $key = strtolower(trim($key));

                // Trim leading/trailing spaces from header value
                $value = trim($value);

                // Concatenate header key and value
                $filtered_headers[] = "{$key}:{$value}";
            }
        }

        // Sort headers in ASCII code order
        sort($filtered_headers, SORT_STRING);

        // Concatenate header pairs with new line character
        return implode("\n", $filtered_headers);
    }

    private function getCanonicalizedResource($url)
    {
        $path = "";
        $query = "";
        $parse_url = parse_url($url);
        if (array_key_exists('path', $parse_url)) {
            $path = $parse_url['path'];
        }
        if (array_key_exists('query', $parse_url)) {
            $query = $parse_url['query'];
        }
        if ($query === "") {
            return $path;
        }

        $params = explode("&", $query);
        sort($params);
        $queryStr = implode("&", $params);
        $path .= "?" . $queryStr;

        return $path;
    }
}
